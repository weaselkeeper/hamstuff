#!/usr/bin/perl -w
#
# Moxon antenna dimension calculator
# John Simpson, KG4ZOW
# <kg4zow@kg4zow.us>
# 2006-08-08
#
# Idea, algorithm, and diagram by L.B. Cebik, W4RNL
# http://www.cebik.com/moxon/moxgen.html
#
# Diagram showing which parts of the antenna correspond to which variables
# http://www.cebik.com/moxon/moxgen-1.gif
#
###############################################################################
#
# Copyright (C) 2006 John Simpson.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# or visit http://www.gnu.org/licenses/gpl.txt
#
###############################################################################

require 5.003 ;
use strict ;

use CGI qw ( :standard ) ;

my %unam =
(
	"in" => "in"	,
	"ag" => "AWG"	,
	"mm" => "mm"	,
	"wl" => "&#x03BB;" , # lambda
) ;

my ( $freq , $diam , $unit , $go ) ;

###############################################################################

sub phead(;$)
{
	my $err = ( shift || "" ) ;

	return <<EOF ;
Content-type: text/html

<html>
<head>
<title>Moxon Calculator</title>
<style></style>
</head>
<body>
<h1>Moxon Calculator</h1>
<p><font color="red"><b>$err</b></font></p>
EOF
}

sub pfoot()
{
	return <<EOF ;
<hr />
<font size="-1">John Simpson, <a href="http://www.kg4zow.us/">KG4ZOW</a>
<a href="moxgen.txt">Download source code for this program</a><br/>
Moxon algorithm and diagram are from
<a href="http://www.cebik.com/moxon/moxgen.html">
http://www.cebik.com/moxon/moxgen.html</a><br/>
AWG Conversion algorithm from
<a href="http://en.wikipedia.org/wiki/American_wire_gauge">Wikipedia</a>
</font>
</body>
</html>
EOF
}

sub showform(;$)
{
	my $err = ( shift || "" ) ;

	my $sin = ( $unit eq "in" ) ? " selected" : "" ;
	my $sag = ( $unit eq "ag" ) ? " selected" : "" ;
	my $smm = ( $unit eq "mm" ) ? " selected" : "" ;
	my $swl = ( $unit eq "wl" ) ? " selected" : "" ;

	print phead ( $err ) , <<EOF ;
<form method="post">
<input type="hidden" name="go" value="yes">
<table border="0">
  <tr>
    <td align="right">Frequency in MHz</td>
    <td><input name="freq" value="$freq" size="10" maxlength="10"></td>
  </tr>
  <tr>
    <td align="right">Wire Diameter</td>
    <td>
      <input name="diam" value="$diam" size="10" maxlength="10">
      <select name="unit">
        <option value="in"$sin>inches</option>
        <option value="ag"$sag>AWG</option>
        <option selected value="mm"$smm>millimeters</option>
        <option value="wl"$swl>wavelengths</option>
      </select>
    </td>
  </tr>
</table>
<input type="submit" value="Calculate" />
<input type="reset" value="Reset" />
</form>
EOF

	print pfoot() ;
	exit 0 ;
}

sub fix($)
{
	my $n = shift ;

	my $f = sprintf ( "%014.6f" , $n ) ;

	# trim all but one leading zero
	while ( $f =~ s/\G0(?!\.)/ /g ) {} ;

	# trim all trailing zeros (except one)
	$f =~ s/0+$//g ;
	$f =~ s/\.$/.0/ ;

	return "<pre>$f</pre>" ;
}

###############################################################################
###############################################################################
###############################################################################

$freq = ( param ( "freq" ) || "" ) ;
$diam = ( param ( "diam" ) || "" ) ;
$unit = ( param ( "unit" ) || "" ) ;
$go   = ( param ( "go"   ) || "" ) ;

showform() unless ( $go eq "yes" ) ;

showform ( "Invalid frequency." ) unless ( $freq > 0 ) ;
showform ( "Invalid diameter."  ) unless ( $diam > 0 ) ;

my $dw = $diam ;	# already good if unit is wavelengths

if ( $unit eq "in" )
{
	$dw = $diam / ( 11802.71 / $freq ) ;
}
elsif ( $unit eq "mm" )
{
	$dw = $diam / ( 299792.5 / $freq ) ;
}
elsif ( $unit eq "ag" ) # convert to inches first
{
	my $zi = 0.005 * 92 ** ( ( 36 - $diam ) / 39 ) ;
	$dw = $zi / ( 11802.71 / $freq ) ;
}
elsif ( $unit ne "wl" )
{
	showform ( "Invalid units code." ) ;
}

my $note = "" ;

my $d1 = 0.4342945 / log ( $dw ) ;
if ( $d1 < -6 )
{
	$note = "Wire diameter too small, results uncertain" ;
}
elsif ( $d1 > -2 )
{
	$note = "Wire diameter too large, results uncertain" ;
}

# calculate dimensions

my $a =   ( -0.0008571428571 * $d1 * $d1 )
	+ ( -0.009571428571 * $d1 )
	+    0.3398571429 ;

my $b =   ( -0.002142857143 * $d1 * $d1 )
	+ ( -0.02035714286  * $d1 )
	+    0.008285714286 ;

my $c =   ( 0.001809523381 * $d1 * $d1 )
	+ ( 0.01780952381  * $d1 )
	+   0.05164285714 ;

my $d =   ( 0.001 * $d1 )
	+   0.07178571429 ;

my $e = $b + $c + $d ;

# calculate values needed for display

my $wf =    983.5592 / $freq ;
my $wi =  11802.71   / $freq ;
my $wm =    299.7925 / $freq ;
my $wl = 299792.5    / $freq ;

my $drv = ( $a / 2 ) + 2 * $b ;
my $ref = $a + 2 * $d ;
my $tot = 2 * $a + 2 * $b + 2 * $d ;

# format numbers for display

my $flw = fix ( 1 ) ;
my $flf = fix ( $wf ) ;
my $fli = fix ( $wi ) ;
my $flm = fix ( $wm ) ;
my $fll = fix ( $wl ) ;

my $fmw = fix ( $dw ) ;
my $fmf = fix ( $dw * (    983.5592 / $freq ) ) ;
my $fmi = fix ( $dw * (  11802.71   / $freq ) ) ;
my $fmm = fix ( $dw * (    299.7925 / $freq ) ) ;
my $fml = fix ( $dw * ( 299792.5    / $freq ) ) ;

my $qunit = ( $unam{$unit} || "($unit ??)" ) ;

my $faw = fix ( $a ) ;
my $faf = fix ( $a * $wf ) ;
my $fai = fix ( $a * $wi ) ;
my $fam = fix ( $a * $wm ) ;
my $fal = fix ( $a * $wl ) ;

my $fbw = fix ( $b ) ;
my $fbf = fix ( $b * $wf ) ;
my $fbi = fix ( $b * $wi ) ;
my $fbm = fix ( $b * $wm ) ;
my $fbl = fix ( $b * $wl ) ;

my $fcw = fix ( $c ) ;
my $fcf = fix ( $c * $wf ) ;
my $fci = fix ( $c * $wi ) ;
my $fcm = fix ( $c * $wm ) ;
my $fcl = fix ( $c * $wl ) ;

my $fdw = fix ( $d ) ;
my $fdf = fix ( $d * $wf ) ;
my $fdi = fix ( $d * $wi ) ;
my $fdm = fix ( $d * $wm ) ;
my $fdl = fix ( $d * $wl ) ;

my $few = fix ( $e ) ;
my $fef = fix ( $e * $wf ) ;
my $fei = fix ( $e * $wi ) ;
my $fem = fix ( $e * $wm ) ;
my $fel = fix ( $e * $wl ) ;

my $fdrvw = fix ( $drv ) ;
my $fdrvf = fix ( $drv * $wf ) ;
my $fdrvi = fix ( $drv * $wi ) ;
my $fdrvm = fix ( $drv * $wm ) ;
my $fdrvl = fix ( $drv * $wl ) ;

my $frefw = fix ( $ref ) ;
my $freff = fix ( $ref * $wf ) ;
my $frefi = fix ( $ref * $wi ) ;
my $frefm = fix ( $ref * $wm ) ;
my $frefl = fix ( $ref * $wl ) ;

my $ftotw = fix ( $tot ) ;
my $ftotf = fix ( $tot * $wf ) ;
my $ftoti = fix ( $tot * $wi ) ;
my $ftotm = fix ( $tot * $wm ) ;
my $ftotl = fix ( $tot * $wl ) ;

########

print phead() , <<EOF ;
<table border="1">
  <tr valign="bottom">
    <th>Dimension</th>
    <th>Wavelengths</th>
    <th>Feet</th>
    <th>Inches</th>
    <th>Meters</th>
    <th>Millimeters</th>
  </tr>
  <tr valign="center">
    <td align="right"><b>Frequency<br/>$freq MHz</b></td>
    <td>$flw</td>
    <td>$flf</td>
    <td>$fli</td>
    <td>$flm</td>
    <td>$fll</td>
  </tr>
  <tr valign="center">
    <td align="right"><b>Diameter<br/>$diam $qunit</b></td>
    <td>$fmw</td>
    <td>$fmf</td>
    <td>$fmi</td>
    <td>$fmm</td>
    <td>$fml</td>
  </tr>
  <tr valign="center">
    <td align="right"><b>A</b></td>
    <td>$faw</td>
    <td>$faf</td>
    <td>$fai</td>
    <td>$fam</td>
    <td>$fal</td>
  </tr>
  <tr valign="center">
    <td align="right"><b>B</b></td>
    <td>$fbw</td>
    <td>$fbf</td>
    <td>$fbi</td>
    <td>$fbm</td>
    <td>$fbl</td>
  </tr>
  <tr valign="center">
    <td align="right"><b>C</b></td>
    <td>$fcw</td>
    <td>$fcf</td>
    <td>$fci</td>
    <td>$fcm</td>
    <td>$fcl</td>
  </tr>
  <tr valign="center">
    <td align="right"><b>D</b></td>
    <td>$fdw</td>
    <td>$fdf</td>
    <td>$fdi</td>
    <td>$fdm</td>
    <td>$fdl</td>
  </tr>
  <tr valign="center">
    <td align="right"><b>E</b></td>
    <td>$few</td>
    <td>$fef</td>
    <td>$fei</td>
    <td>$fem</td>
    <td>$fel</td>
  </tr>
<!--
  <tr valign="center">
    <td align="right"><b>Driver Half<br/>a/2+2b</b></td>
    <td>$fdrvw</td>
    <td>$fdrvf</td>
    <td>$fdrvi</td>
    <td>$fdrvm</td>
    <td>$fdrvl</td>
  </tr>
  <tr valign="center">
    <td align="right"><b>Reflector<br/>a+2d</b></td>
    <td>$frefw</td>
    <td>$freff</td>
    <td>$frefi</td>
    <td>$frefm</td>
    <td>$frefl</td>
  </tr>
  <tr valign="center">
    <td align="right"><b>Total Emitter<br/>2a+2b+2d</b></td>
    <td>$ftotw</td>
    <td>$ftotf</td>
    <td>$ftoti</td>
    <td>$ftotm</td>
    <td>$ftotl</td>
  </tr>
-->
</table>
<img src="/radio/moxgen-1.gif" alt="[Diagram]" border="0" />
EOF

print pfoot() ;
exit 0 ;
